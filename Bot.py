import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import random
from datetime import datetime, timedelta
import json
import os


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


DATA_FILE = 'users_data.json'


ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '123456789')
ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(',')]


def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
            return {}
    return {}


def save_data(data):

    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")



users_data = load_data()


async def sisi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.effective_user
    user_id = str(user.id)
    nickname = user.first_name

    current_time = datetime.now()


    if user_id not in users_data:
        users_data[user_id] = {
            'size': 0.0,
            'last_use': None,
            'nickname': nickname
        }


    users_data[user_id]['nickname'] = nickname

    user_info = users_data[user_id]


    if user_info['last_use']:
        last_use_time = datetime.fromisoformat(user_info['last_use'])
        time_passed = current_time - last_use_time
        cooldown = timedelta(hours=1)

        if time_passed < cooldown:
            time_left = cooldown - time_passed
            minutes = int(time_left.total_seconds() // 60)
            seconds = int(time_left.total_seconds() % 60)

            await update.message.reply_text(
                f"{nickname}, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫. "
                f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {user_info['size']:.2f} —Å–º."
            )
            return


    growth = round(random.uniform(0.5, 4.0), 2)
    user_info['size'] += growth
    user_info['last_use'] = current_time.isoformat()


    save_data(users_data)

    await update.message.reply_text(
        f"{nickname}, —Ç–≤–æ—è –≥—Ä—É–¥—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {growth:.2f} —Å–º! "
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {user_info['size']:.2f} —Å–º."
    )


async def give_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.effective_user


    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return


    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givesize <user_id> <—Ä–∞–∑–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /givesize 123456789 100.5"
        )
        return

    try:
        target_user_id = str(context.args[0])
        size_to_give = float(context.args[1])


        if target_user_id not in users_data:
            users_data[target_user_id] = {
                'size': 0.0,
                'last_use': None,
                'nickname': 'Unknown'
            }


        users_data[target_user_id]['size'] += size_to_give
        save_data(users_data)

        await update.message.reply_text(
            f"‚úÖ –í—ã–¥–∞–Ω–æ {size_to_give:.2f} —Å–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
            f"–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {users_data[target_user_id]['size']:.2f} —Å–º"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def set_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.effective_user


    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setsize <user_id> <—Ä–∞–∑–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /setsize 123456789 100.5"
        )
        return

    try:
        target_user_id = str(context.args[0])
        new_size = float(context.args[1])


        if target_user_id not in users_data:
            users_data[target_user_id] = {
                'size': 0.0,
                'last_use': None,
                'nickname': 'Unknown'
            }


        users_data[target_user_id]['size'] = new_size
        save_data(users_data)

        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {new_size:.2f} —Å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    if not users_data:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi")
        return


    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['size'], reverse=True)


    message = "üìä <b>–¢–æ–ø —Ä–∞–∑–º–µ—Ä–æ–≤:</b>\n\n"

    medals = ["ü•á", "ü•à", "ü•â"]

    for index, (user_id, user_info) in enumerate(sorted_users[:10], 1):  # –¢–æ–ø 10
        nickname = user_info.get('nickname', 'Unknown')
        size = user_info['size']


        if index <= 3:
            medal = medals[index - 1]
            message += f"{medal} <b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"
        else:
            message += f"<b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"

    if len(sorted_users) > 10:
        message += f"\n<i>–ò –µ—â–µ {len(sorted_users) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</i>"

    await update.message.reply_text(message, parse_mode='HTML')


async def my_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.effective_user
    user_id = str(user.id)
    nickname = user.first_name

    if user_id not in users_data:
        await update.message.reply_text(
            f"{nickname}, —Ç—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - 0.00 —Å–º"
        )
        return

    size = users_data[user_id]['size']
    await update.message.reply_text(
        f"{nickname}, —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {size:.2f} —Å–º"
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéÄ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sisi - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/mysize - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π: /sisi@sisiupbot"
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    logging.error(f"Update {update} caused error {context.error}")


def main():

    TOKEN = os.getenv('BOT_TOKEN')

    if not TOKEN or TOKEN == 'YOUR_BOT_TOKEN':
        logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return


    application = Application.builder().token(TOKEN).build()


    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sisi", sisi_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("mysize", my_size_command))
    application.add_handler(CommandHandler("givesize", give_size_command))
    application.add_handler(CommandHandler("setsize", set_size_command))


    application.add_error_handler(error_handler)


    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == '__main__':
    main()