import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import random
from datetime import datetime, timedelta
import os
from aiohttp import web
import asyncio
import asyncpg

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '123456789')
ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(',')]

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_pool = None


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global db_pool
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        logging.error("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return None
    
    try:
        db_pool = await asyncpg.create_pool(database_url, min_size=1, max_size=10)
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with db_pool.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    nickname TEXT NOT NULL,
                    size REAL DEFAULT 0.0,
                    last_use TIMESTAMP
                )
            ''')
        logging.info("–¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞")
        return db_pool
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None


async def get_user_data(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            'SELECT user_id, nickname, size, last_use FROM users WHERE user_id = $1',
            user_id
        )
        if row:
            return {
                'user_id': row['user_id'],
                'nickname': row['nickname'],
                'size': float(row['size']),
                'last_use': row['last_use']
            }
        return None


async def save_user_data(user_id: int, nickname: str, size: float, last_use: datetime = None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (user_id, nickname, size, last_use)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) 
            DO UPDATE SET nickname = $2, size = $3, last_use = $4
        ''', user_id, nickname, size, last_use)


async def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            'SELECT user_id, nickname, size, last_use FROM users ORDER BY size DESC'
        )
        return [{
            'user_id': row['user_id'],
            'nickname': row['nickname'],
            'size': float(row['size']),
            'last_use': row['last_use']
        } for row in rows]


async def sisi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    nickname = user.first_name
    current_time = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_data(user_id)
    
    if not user_data:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = {
            'user_id': user_id,
            'nickname': nickname,
            'size': 0.0,
            'last_use': None
        }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if user_data['last_use']:
        time_passed = current_time - user_data['last_use']
        cooldown = timedelta(hours=1)

        if time_passed < cooldown:
            time_left = cooldown - time_passed
            minutes = int(time_left.total_seconds() // 60)
            seconds = int(time_left.total_seconds() % 60)
            await update.message.reply_text(
                f"{nickname}, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫. "
                f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {user_data['size']:.2f} —Å–º."
            )
            return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    growth = round(random.uniform(0.5, 4.0), 2)
    new_size = user_data['size'] + growth
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_user_data(user_id, nickname, new_size, current_time)

    await update.message.reply_text(
        f"{nickname}, —Ç–≤–æ—è –≥—Ä—É–¥—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {growth:.2f} —Å–º! "
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {new_size:.2f} —Å–º."
    )


async def give_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givesize <user_id> <—Ä–∞–∑–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /givesize 123456789 100.5"
        )
        return

    try:
        target_user_id = int(context.args[0])
        size_to_give = float(context.args[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(target_user_id)
        
        if not user_data:
            user_data = {
                'nickname': 'Unknown',
                'size': 0.0,
                'last_use': None
            }
        
        new_size = user_data['size'] + size_to_give
        await save_user_data(target_user_id, user_data['nickname'], new_size, user_data['last_use'])

        await update.message.reply_text(
            f"‚úÖ –í—ã–¥–∞–Ω–æ {size_to_give:.2f} —Å–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
            f"–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {new_size:.2f} —Å–º"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def set_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setsize <user_id> <—Ä–∞–∑–º–µ—Ä>\n"
            "–ü—Ä–∏–º–µ—Ä: /setsize 123456789 100.5"
        )
        return

    try:
        target_user_id = int(context.args[0])
        new_size = float(context.args[1])

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user_data(target_user_id)
        
        if not user_data:
            user_data = {
                'nickname': 'Unknown',
                'last_use': None
            }
        
        await save_user_data(target_user_id, user_data['nickname'], new_size, user_data.get('last_use'))

        await update.message.reply_text(
            f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {new_size:.2f} —Å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}"
        )
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = await get_all_users()
    
    if not users:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi")
        return

    message = "üìä <b>–¢–æ–ø —Ä–∞–∑–º–µ—Ä–æ–≤:</b>\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]

    for index, user_data in enumerate(users[:10], 1):
        nickname = user_data['nickname']
        size = user_data['size']

        if index <= 3:
            medal = medals[index - 1]
            message += f"{medal} <b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"
        else:
            message += f"<b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"

    if len(users) > 10:
        message += f"\n<i>–ò –µ—â–µ {len(users) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</i>"

    await update.message.reply_text(message, parse_mode='HTML')


async def my_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    nickname = user.first_name

    user_data = await get_user_data(user_id)
    
    if not user_data:
        await update.message.reply_text(
            f"{nickname}, —Ç—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - 0.00 —Å–º"
        )
        return

    size = user_data['size']
    await update.message.reply_text(
        f"{nickname}, —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {size:.2f} —Å–º"
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéÄ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sisi - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/mysize - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π: /sisi@sisiupbot"
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Update {update} caused error {context.error}")


async def health_check(request):
    return web.Response(text='OK', status=200)


async def start_web_server():
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)

    port = int(os.getenv('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")


async def run_bot():
    TOKEN = os.getenv('BOT_TOKEN')

    if not TOKEN or TOKEN == 'YOUR_BOT_TOKEN':
        logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    application = Application.builder().token(TOKEN).job_queue(None).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sisi", sisi_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("mysize", my_size_command))
    application.add_handler(CommandHandler("givesize", give_size_command))
    application.add_handler(CommandHandler("setsize", set_size_command))

    application.add_error_handler(error_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    await application.initialize()
    await application.start()
    await application.updater.start_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )
    
    try:
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    
    if db_pool is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞
    await asyncio.gather(
        start_web_server(),
        run_bot()
    )


if __name__ == '__main__':
    asyncio.run(main())
