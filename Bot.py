import logging
from telegram import Update, ChatMember
from telegram.ext import Application, CommandHandler, ContextTypes, ChatMemberHandler
import random
from datetime import datetime, timedelta, timezone  # <--- –ò–ú–ü–û–†–¢–ò–†–û–í–ê–õ–ò timezone
import os
from aiohttp import web
import asyncio
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Supabase –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not SUPABASE_URL or not SUPABASE_KEY:
    logging.critical("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏–ª–∏ SUPABASE_KEY. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î.")
    exit()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '123456789')
ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(',')]


def get_user_data(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase"""
    try:
        response = supabase.table('users').select('*').eq('user_id', user_id).limit(1).execute()
        if response.data and len(response.data) > 0:
            return response.data[0]
        return None
    except Exception as e:
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤–∞–ª–∏–º—Å—è
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return None


def create_or_update_user(user_id: str, nickname: str, size: float = None, last_use: str = None):
    """–°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (UPSERT)"""
    try:
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_data = {
            'user_id': user_id,
            'nickname': nickname,
        }
        if size is not None:
            user_data['size'] = size
        if last_use is not None:
            user_data['last_use'] = last_use

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'upsert' –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        # 'on_conflict' —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ 'user_id' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        response = supabase.table('users').upsert(
            user_data,
            on_conflict='user_id'
        ).execute()

        if response.data and len(response.data) > 0:
            return response.data[0]
        else:
            # –ï—Å–ª–∏ upsert –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–æ—Å–∏–º –∏—Ö
            return get_user_data(user_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return None


def get_all_users_sorted():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ size –Ω–µ null, —á—Ç–æ–±—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        response = supabase.table('users').select('*').not_.is_('size', 'is', None).order('size', desc=True).execute()
        return response.data if response.data else []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", exc_info=True)
        return []


def delete_user(user_id: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = supabase.table('users').delete().eq('user_id', user_id).execute()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return False


async def sisi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å effective_user –≤ sisi_command")
        return

    user_id = str(user.id)
    nickname = user.first_name or user.username or "Unknown"
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ---
    current_time = datetime.now(timezone.utc)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user_data = get_user_data(user_id)

    if not user_data:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} ({nickname})")
        user_data = create_or_update_user(user_id, nickname, 0.0, None)
        if not user_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ (—Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å), —É—Å—Ç–∞–Ω–æ–≤–∏–º 0
    if user_data.get('size') is None:
        user_data['size'] = 0.0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if user_data.get('last_use'):
        try:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: last_use_time –±—É–¥–µ—Ç 'aware' (—Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º) ---
            last_use_time = datetime.fromisoformat(user_data['last_use'])

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ last_use_time –∏–º–µ–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if last_use_time.tzinfo is None:
                last_use_time = last_use_time.replace(tzinfo=timezone.utc)

            time_passed = current_time - last_use_time
            cooldown = timedelta(hours=1)

            if time_passed < cooldown:
                time_left = cooldown - time_passed
                minutes = int(time_left.total_seconds() // 60)
                seconds = int(time_left.total_seconds() % 60)
                await update.message.reply_text(
                    f"<i>{nickname}, –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫. </i>"
                    f"<i>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {user_data['size']:.2f} —Å–º.</i>"
                )
                return
        except ValueError:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ 'last_use' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_data['last_use']}")

            pass
        except TypeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {user_id}: {e}", exc_info=True)
            pass


    growth = round(random.uniform(0.5, 4.0), 2)
    new_size = user_data['size'] + growth


    updated_user = create_or_update_user(
        user_id,
        nickname,
        new_size,
        current_time.isoformat()
    )

    if updated_user:
        await update.message.reply_text(
            f"<i>{nickname}, —Ç–≤–æ—è –≥—Ä—É–¥—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ {growth:.2f} —Å–º!</i> "
            f"<i>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {new_size:.2f} —Å–º.üçà</i>"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def give_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
        )
        return

    try:
        target_user_id = str(context.args[0])
        size_to_give = float(context.args[1])

        user_data = get_user_data(target_user_id)
        current_size = 0.0
        nickname = 'Unknown'
        last_use = None

        if user_data:
            current_size = user_data.get('size', 0.0)
            nickname = user_data.get('nickname', 'Unknown')
            last_use = user_data.get('last_use')

        new_size = current_size + size_to_give
        updated_user = create_or_update_user(target_user_id, nickname, new_size, last_use)

        if updated_user:
            await update.message.reply_text(
                f"‚úÖ –í—ã–¥–∞–Ω–æ {size_to_give:.2f} —Å–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}\n"
                f"–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {updated_user.get('size', new_size):.2f} —Å–º"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    except ValueError:
        await update.message.reply_text("")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def set_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
        )
        return

    try:
        target_user_id = str(context.args[0])
        new_size = float(context.args[1])

        user_data = get_user_data(target_user_id)
        nickname = user_data.get('nickname', 'Unknown') if user_data else 'Unknown'
        last_use = user_data.get('last_use') if user_data else None

        updated_user = create_or_update_user(target_user_id, nickname, new_size, last_use)

        if updated_user:
            await update.message.reply_text(
                f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {new_size:.2f} —Å–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. ID –∏ —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def delete_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    user = update.effective_user
    if not user:
        return

    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deleteuser <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /deleteuser 123456789"
        )
        return

    try:
        target_user_id = str(context.args[0])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = get_user_data(target_user_id)

        if not user_data:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if delete_user(target_user_id):
            await update.message.reply_text(
                f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} ({user_data.get('nickname', 'N/A')}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞\n"
                f"–£–¥–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä: {user_data.get('size', 0.0):.2f} —Å–º"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users_sorted()

    if not users:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi")
        return

    message = "üìä <b>–¢–æ–ø —Ä–∞–∑–º–µ—Ä–æ–≤:</b>\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]

    for index, user_data in enumerate(users[:10], 1):
        nickname = user_data.get('nickname', 'Unknown')
        size = user_data.get('size', 0.0)

        if index <= 3:
            medal = medals[index - 1]
            message += f"{medal} <b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"
        else:
            message += f"<b>{index}.</b> {nickname} ‚Äî {size:.2f} —Å–º\n"

    if len(users) > 10:
        message += f"\n<i>–ò –µ—â–µ {len(users) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...</i>"

    await update.message.reply_text(message, parse_mode='HTML')


async def my_size_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return

    user_id = str(user.id)
    nickname = user.first_name or user.username or "Unknown"

    user_data = get_user_data(user_id)

    if not user_data or user_data.get('size') is None:
        await update.message.reply_text(
            f"{nickname}, —Ç—ã –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /sisi\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - 0.00 —Å–º"
        )
        return

    size = user_data['size']
    await update.message.reply_text(
        f"{nickname}, —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä - {size:.2f} —Å–º"
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üéÄ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/sisi - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/mysize - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä\n"
        "/stats - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
    )


# --- –£–õ–£–ß–®–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ---
async def track_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞ (–≤—Ö–æ–¥—ã, –≤—ã—Ö–æ–¥—ã, –±–æ—Ç)"""
    try:
        # update.chat_member —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫ (–Ω–µ –±–æ—Ç) –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å
        # update.my_chat_member —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ë–û–¢ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å
        result = update.chat_member or update.my_chat_member

        if not result:
            logging.warning("track_chat_member —Å—Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ chat_member –∏–ª–∏ my_chat_member")
            return

        chat = result.chat
        user = result.new_chat_member.user
        new_status = result.new_chat_member.status
        old_status = result.old_chat_member.status

        log_message = (
            f"Chat member update in chat '{chat.title}' (ID: {chat.id}). "
            f"User: '{user.first_name}' (ID: {user.id}). "
            f"Status change: {old_status} -> {new_status}"
        )

        if update.my_chat_member:
            log_message = f"[BOT STATUS] {log_message}"
            if new_status == 'kicked' or new_status == 'left':
                logging.info(f"–ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ —á–∞—Ç–∞: {chat.title} ({chat.id})")
            else:
                logging.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –≤ —á–∞—Ç–µ: {chat.title} ({chat.id}) -> {new_status}")
        else:
            log_message = f"[USER STATUS] {log_message}"
            logging.info(log_message)

    except Exception as e:
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –≤–∞–ª–∏–º—Å—è
        logging.error(f"–û—à–∏–±–∫–∞ –≤ track_chat_member: {e}", exc_info=True)
        if update:
            logging.error(f"–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç update, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É: {update.to_json()}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    logging.error(f"Update {update} caused error {context.error}", exc_info=context.error)


async def health_check(request):
    """Endpoint –¥–ª—è UptimeBot/Render health check"""
    logging.info("Health check / OK")
    return web.Response(text='OK', status=200)


async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ aiohttp –¥–ª—è health check"""
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)

    port = int(os.getenv('PORT', 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)

    try:
        await site.start()
        logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∂–∏–≤—ã–º
        await asyncio.Event().wait()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
    finally:
        await runner.cleanup()


async def run_bot():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ (polling)"""
    TOKEN = os.getenv('BOT_TOKEN')

    if not TOKEN or TOKEN == 'YOUR_BOT_TOKEN':
        logging.critical("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("sisi", sisi_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("mysize", my_size_command))
    application.add_handler(CommandHandler("givesize", give_size_command))
    application.add_handler(CommandHandler("setsize", set_size_command))
    application.add_handler(CommandHandler("deleteuser", delete_user_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    application.add_handler(ChatMemberHandler(track_chat_member, ChatMemberHandler.ANY_CHAT_MEMBER))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (polling)...")
    try:
        await application.run_polling(
            allowed_updates=Update.ALL_TYPES,  # <--- –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            drop_pending_updates=True
        )
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}", exc_info=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    logging.info("–ó–∞–ø—É—Å–∫ main()...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    # gather –¥–æ–∂–¥–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö (—Ö–æ—Ç—è –≤ –∏–¥–µ–∞–ª–µ –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è)
    try:
        await asyncio.gather(
            start_web_server(),
            run_bot()
        )
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main() gather: {e}", exc_info=True)


if __name__ == '__main__':
    asyncio.run(main())
